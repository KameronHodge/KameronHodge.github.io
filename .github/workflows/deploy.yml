name: "Publish to GitHub Pages"

env:
  GODOT_VERSION: 4.4.1

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    container:
      image: barichello/godot-ci:4.4.1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Move HTML5 templates into position
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable

      - name: Create staging directory
        run: mkdir -v -p build/web

      - name: Build
        run: |
          cd project/webportfoliotest
          godot -v --export-release --headless "Web" ../../build/web/index.html

      - name: Add aggressive cache-busting
        run: |
          # Clone COI service worker
          git clone --depth 1 https://github.com/gzuidhof/coi-serviceworker.git
          mv coi-serviceworker/coi-serviceworker.js build/web/coi-serviceworker.js

          # Generate unique cache-busting identifiers
          TIMESTAMP=$(date +%s)
          RANDOM_STRING=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
          VERSION="${TIMESTAMP}-${RANDOM_STRING}"

          # Create a new filename for each asset with version embedded in name
          mkdir -p build/web/v${VERSION}

          # For JavaScript files
          for js_file in build/web/*.js; do
            if [ -f "$js_file" ] && [ "$(basename "$js_file")" != "coi-serviceworker.js" ]; then
              filename=$(basename "$js_file")
              cp "$js_file" "build/web/v${VERSION}/${filename}"
              # Update references in index.html
              sed -i "s|$filename|v${VERSION}/$filename|g" build/web/index.html
            fi
          done

          # For WASM files
          for wasm_file in build/web/*.wasm; do
            if [ -f "$wasm_file" ]; then
              filename=$(basename "$wasm_file")
              cp "$wasm_file" "build/web/v${VERSION}/${filename}"
              # Update references in index.html
              sed -i "s|$filename|v${VERSION}/$filename|g" build/web/index.html
            fi
          done

          # For PCK files
          for pck_file in build/web/*.pck; do
            if [ -f "$pck_file" ]; then
              filename=$(basename "$pck_file")
              cp "$pck_file" "build/web/v${VERSION}/${filename}"
              # Update references in index.html
              sed -i "s|$filename|v${VERSION}/$filename|g" build/web/index.html
            fi
          done

          # Add COI service worker script tag
          sed -i '3i <script src="coi-serviceworker.js"></script>' build/web/index.html

          # Create a localStorage-based cache checker that forces reload
          cat > build/web/force-refresh.js << EOL
          (function() {
            // Store the current version
            const CURRENT_VERSION = '${VERSION}';

            // Check if we need to force a refresh
            function checkForRefresh() {
              const lastVersion = localStorage.getItem('godot_game_version');

              // If version is different or doesn't exist, update and reload
              if (lastVersion !== CURRENT_VERSION) {
                console.log('New version detected: ' + CURRENT_VERSION);

                // Clear any existing caches if Cache API is available
                if ('caches' in window) {
                  caches.keys().then(function(cacheNames) {
                    return Promise.all(
                      cacheNames.map(function(cacheName) {
                        console.log('Deleting cache: ' + cacheName);
                        return caches.delete(cacheName);
                      })
                    );
                  });
                }

                // Save the new version
                localStorage.setItem('godot_game_version', CURRENT_VERSION);

                // Force a hard reload if not initial load
                if (lastVersion) {
                  console.log('Forcing page reload');

                  // For Firefox - this is a more aggressive approach
                  window.location.href = window.location.href.split('?')[0] +
                    '?cachebust=' + CURRENT_VERSION + '&time=' + Date.now();
                  return true;
                }
              }

              return false;
            }

            // Run check immediately and prevent caching
            if (!checkForRefresh()) {
              // Prevent browser back-forward cache
              window.addEventListener('pageshow', function(event) {
                if (event.persisted) {
                  console.log('Page was loaded from cache - checking version');
                  checkForRefresh();
                }
              });

              // Check again when visibility changes (user returns to tab)
              document.addEventListener('visibilitychange', function() {
                if (!document.hidden) {
                  console.log('Page visibility changed - checking version');
                  checkForRefresh();
                }
              });
            }
          })();
          EOL

          # Add the refresh script to index.html
          sed -i '3i <script src="force-refresh.js"></script>' build/web/index.html

          # Create meta tags to prevent caching (more aggressive)
          sed -i '3i <meta http-equiv="Pragma" content="no-cache">' build/web/index.html
          sed -i '3i <meta http-equiv="Expires" content="-1">' build/web/index.html
          sed -i '3i <meta http-equiv="Cache-Control" content="no-store, no-cache, must-revalidate, max-age=0">' build/web/index.html

          # Create a _headers file for Netlify/Vercel/etc.
          cat > build/web/_headers << EOL
          /*
            Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0
            Pragma: no-cache
            Expires: 0
          EOL

          # Add version info comment
          sed -i "1i <!-- Game Version: ${VERSION} -->" build/web/index.html

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3.9.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/web
          force_orphan: true
          user_name: "github-ci[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"
          commit_message: "Publish to gh-pages"
